{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { TaskComponent } from '../task/task.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../my-service.service\";\nimport * as i2 from \"@angular/router\";\nexport class UpdateTaskComponent {\n  constructor(serv, router, route) {\n    this.serv = serv;\n    this.router = router;\n    this.route = route;\n    this.id = 0;\n    this.updateTaskForm = new FormGroup({\n      task_id: new FormControl('', [Validators.required]),\n      task_name: new FormControl('', [Validators.required]),\n      description: new FormControl('', [Validators.required]),\n      overdue: new FormControl('', [Validators.required])\n    });\n    this.task = new TaskComponent();\n  }\n  ngOnInit() {\n    this.id = this.route.snapshot.params['id'];\n    this.serv.getTaskById(this.id).subscribe(data => {\n      this.task = data;\n    }, error => console.log(error));\n  }\n  get TaskId() {\n    return this.updateTaskForm.get('task_id');\n  }\n  get TaskName() {\n    return this.updateTaskForm.get('task_name');\n  }\n  get desc() {\n    return this.updateTaskForm.get('description');\n  }\n  get Overdue() {\n    return this.updateTaskForm.get('overdue');\n  }\n  UpdateTaskFormSubmit() {\n    this.serv.updateTask(this.id, this.task).subscribe(data => {\n      this.goToTaskList();\n    }, error => console.log(error));\n    alert(\"Updated Task Successfully\");\n  }\n  goToTaskList() {\n    this.router.navigate(['/user/task-inbox']);\n  }\n  static #_ = this.ɵfac = function UpdateTaskComponent_Factory(t) {\n    return new (t || UpdateTaskComponent)(i0.ɵɵdirectiveInject(i1.MyServiceService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UpdateTaskComponent,\n    selectors: [[\"app-update-task\"]],\n    decls: 0,\n    vars: 0,\n    template: function UpdateTaskComponent_Template(rf, ctx) {},\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAGnE,SAASC,aAAa,QAAQ,wBAAwB;;;;AAOtD,OAAM,MAAOC,mBAAmB;EAS9BC,YAAoBC,IAAsB,EAASC,MAAc,EAASC,KAAqB;IAA3E,SAAI,GAAJF,IAAI;IAA2B,WAAM,GAANC,MAAM;IAAiB,UAAK,GAALC,KAAK;IAR/E,OAAE,GAAQ,CAAC;IACX,mBAAc,GAAG,IAAIP,SAAS,CAAC;MAC7BQ,OAAO,EAAC,IAAIT,WAAW,CAAC,EAAE,EAAC,CAACE,UAAU,CAACQ,QAAQ,CAAC,CAAC;MACjDC,SAAS,EAAC,IAAIX,WAAW,CAAC,EAAE,EAAC,CAACE,UAAU,CAACQ,QAAQ,CAAC,CAAC;MACnDE,WAAW,EAAC,IAAIZ,WAAW,CAAC,EAAE,EAAC,CAACE,UAAU,CAACQ,QAAQ,CAAC,CAAC;MACrDG,OAAO,EAAC,IAAIb,WAAW,CAAC,EAAE,EAAC,CAACE,UAAU,CAACQ,QAAQ,CAAC;KACjD,CAAC;IACF,SAAI,GAAkB,IAAIP,aAAa,EAAE;EAC0D;EACnGW,QAAQ;IACN,IAAI,CAACC,EAAE,GAAG,IAAI,CAACP,KAAK,CAACQ,QAAQ,CAACC,MAAM,CAAC,IAAI,CAAC;IAE1C,IAAI,CAACX,IAAI,CAACY,WAAW,CAAC,IAAI,CAACH,EAAE,CAAC,CAACI,SAAS,CAACC,IAAI,IAAG;MAC9C,IAAI,CAACC,IAAI,GAAGD,IAAI;IAClB,CAAC,EAAEE,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EACjC;EACA,IAAIG,MAAM;IACR,OAAO,IAAI,CAACC,cAAc,CAACC,GAAG,CAAC,SAAS,CAAC;EAC3C;EACA,IAAIC,QAAQ;IACV,OAAO,IAAI,CAACF,cAAc,CAACC,GAAG,CAAC,WAAW,CAAC;EAC7C;EACA,IAAIE,IAAI;IACN,OAAO,IAAI,CAACH,cAAc,CAACC,GAAG,CAAC,aAAa,CAAC;EAC/C;EAEA,IAAIG,OAAO;IACT,OAAO,IAAI,CAACJ,cAAc,CAACC,GAAG,CAAC,SAAS,CAAC;EAC3C;EACAI,oBAAoB;IAClB,IAAI,CAACzB,IAAI,CAAC0B,UAAU,CAAC,IAAI,CAACjB,EAAE,EAAE,IAAI,CAACM,IAAI,CAAC,CAACF,SAAS,CAAEC,IAAI,IAAG;MACzD,IAAI,CAACa,YAAY,EAAE;IACrB,CAAC,EACCX,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;IAC9BY,KAAK,CAAC,2BAA2B,CAAC;EACpC;EACAD,YAAY;IACV,IAAI,CAAC1B,MAAM,CAAC4B,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC;EAC5C;EAAC;qBAvCU/B,mBAAmB;EAAA;EAAA;UAAnBA,mBAAmB;IAAAgC;IAAAC;IAAAC;IAAAC;IAAAC;EAAA","names":["FormControl","FormGroup","Validators","TaskComponent","UpdateTaskComponent","constructor","serv","router","route","task_id","required","task_name","description","overdue","ngOnInit","id","snapshot","params","getTaskById","subscribe","data","task","error","console","log","TaskId","updateTaskForm","get","TaskName","desc","Overdue","UpdateTaskFormSubmit","updateTask","goToTaskList","alert","navigate","selectors","decls","vars","template","styles"],"sourceRoot":"","sources":["G:\\TMS\\TMS_Backend\\src\\app\\update-task\\update-task.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MyServiceService } from '../my-service.service';\nimport { TaskComponent } from '../task/task.component';\n\n@Component({\n  selector: 'app-update-task',\n  templateUrl: './update-task.component.html',\n  styleUrls: ['./update-task.component.css']\n})\nexport class UpdateTaskComponent {\n  id:number=0;\n  updateTaskForm = new FormGroup({\n    task_id:new FormControl('',[Validators.required]),\n    task_name:new FormControl('',[Validators.required]),\n    description:new FormControl('',[Validators.required]),\n    overdue:new FormControl('',[Validators.required])\n  })\n  task: TaskComponent = new TaskComponent();\n  constructor(private serv: MyServiceService,private router: Router,private route: ActivatedRoute) { }\n  ngOnInit(): void {\n    this.id = this.route.snapshot.params['id'];\n\n    this.serv.getTaskById(this.id).subscribe(data => {\n      this.task = data;\n    }, error => console.log(error));\n  }\n  get TaskId(){\n    return this.updateTaskForm.get('task_id');\n  }\n  get TaskName(){\n    return this.updateTaskForm.get('task_name');\n  }\n  get desc(){\n    return this.updateTaskForm.get('description');\n  }\n\n  get Overdue(){\n    return this.updateTaskForm.get('overdue');\n  }\n  UpdateTaskFormSubmit(){\n    this.serv.updateTask(this.id, this.task).subscribe( data =>{\n      this.goToTaskList();\n    }\n    , error => console.log(error));\n    alert(\"Updated Task Successfully\");\n  }\n  goToTaskList() {\n    this.router.navigate(['/user/task-inbox']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}